q()
python```
install.packages(c("boot", "foreign", "lattice", "MASS", "nlme"))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
plot(pressure)
plot(pressure)
plot(pressure)
install.packages(c('Rcpp', 'RcppArmadillo')
)
Rcpp::sourceCpp('Untitled.cpp')
timesTwo()
timesTwo(1)
timesTwo(10)
library(shiny)
library(mqtt)
library(hrbrthemes)
library(tidyverse)
install.packages("mqtt")
install.packages("hrbrthemes")
library(shiny)
library(mqtt)
library(hrbrthemes)
hrbrthemes::import_roboto_condensed()
library(hrbrthemes)
install.packages("mqtt")
library(mqtt)
devtools::install_github("hrbrmstr/mqtt")
devtools::install_github("hrbrmstr/mqtt")
library(mqtt)
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
install.packages(c("backports", "boot", "broom", "callr", "class", "coronavirus", "dbplyr", "devtools", "dplyr", "ellipsis", "fs", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "isoband", "KernSmooth", "later", "lattice", "lubridate", "MASS", "modelr", "nlme", "nnet", "pdftools", "pillar", "pkgbuild", "pkgload", "promises", "ps", "purrr", "RcppArmadillo", "reshape2", "rex", "rmarkdown", "rversions", "scales", "spatial", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
library(mqtt)
library(shiny)
library(mqtt)
library(hrbrthemes)
library(tidyverse)
runApp('RProjects/testMqtt')
update.packages("mqtt")
library(mqtt)
library(Rcpp)
library(mqtt)
packageVersion("mqtt")
print(mqtt:::mqtt_version())
x <- 0
my_msg_cb <- function(id, topic, payload, qos, retain) {
if (topic == "bbc/subtitles/bbc_news24/compacted") { # when we see BBC msgs, we'll cat them
x <<- x + 1
cat(readBin(payload, "character"), "\n", sep="")
} else {
print(topic)
}
return(if (x==50) "quit" else "continue") # "continue" can be "". anything but "quit"
}
topic_subscribe(topic="bbc/subtitles/bbc_news24/compacted", message_callback=my_msg_cb
)
topic_subscribe
? topic_subscribe
mqtt::mqtt_silent_connection_callback
?  purrr::map
1:10 %>%
map(rnorm, n = 10)
library(mqtt)
sensor <- function(id, topic, payload, qos, retain, con) {
if (topic == "bbc/subtitles/bbc_two_england/raw") {
cat(crayon::cyan(topic), crayon::blue(readBin(payload, "character")), "\n", sep=" ")
}
}
# NOTE: Use a unique name vs `hrbrunique`
mqtt_broker("hrbrnique", "test.mosquitto.org", 1883L) %>%
mqtt_silence(c("error", "log")) %>%
mqtt_subscribe(
"bbc/subtitles/bbc_one_london/raw",
function(id, topic, payload, qos, retain, con) { # regular anonymous function
if (topic == "bbc/subtitles/bbc_one_london/raw")
cat(crayon::yellow(topic), crayon::green(readBin(payload, "character")), "\n", sep=" ")
}) %>%
mqtt_subscribe("bbc/subtitles/bbc_news24/raw", ~{ # tilde shortcut function (passing in named, pre-known params)
if (topic == "bbc/subtitles/bbc_news24/raw")
cat(crayon::yellow(topic), crayon::red(readBin(payload, "character")), "\n", sep=" ")
}) %>%
mqtt_subscribe("bbc/subtitles/bbc_two_england/raw", sensor) %>% # named function
mqtt_run() -> res
? mqtt_broker
mqtt_broker("hrbrnique", "192.168.0.17", 1883L)
mqtt_broker("hrbrnique", "192.168.0.17", 1883L) %>%
mqtt_silence(c("error", "log")) %>%
mqtt_subscribe(
"accelo1",
function(id, topic, payload, qos, retain, con) { # regular anonymous function
if (topic == "accelo1")
cat(crayon::yellow(topic), crayon::green(readBin(payload, "character")), "\n", sep=" ")
})
mqtt_broker("hrbrnique", "192.168.0.17", 1883L) %>%
mqtt_silence(c("error", "log")) %>%
mqtt_subscribe(
"accelo1",
function(id, topic, payload, qos, retain, con) { # regular anonymous function
if (topic == "accelo1")
cat(crayon::yellow(topic), crayon::green(readBin(payload, "character")), "\n", sep=" ")
}) %>%
mqtt_subscribe("accelo1", ~{ # tilde shortcut function (passing in named, pre-known params)
if (topic == "accelo1")
cat(crayon::yellow(topic), crayon::red(readBin(payload, "character")), "\n", sep=" ")
}) %>%
mqtt_subscribe("accelo1", sensor) %>% # named function
mqtt_run() -> res
library(animation)
library(ggplot2)
# your data
n  <- 1000
df <- data.frame(time=1:n,y=runif(n))
window <- 100
# create the animation
saveHTML({
for(i in 1:(n-window)) {
print(ggplot(df) + geom_line(aes(x=time, y=y), size=0.7) + xlim(i,i+window))
}
})
library(animation)
install.packages("animation")
library(animation)
library(ggplot2)
# your data
n  <- 1000
df <- data.frame(time=1:n,y=runif(n))
window <- 100
# create the animation
saveHTML({
for(i in 1:(n-window)) {
print(ggplot(df) + geom_line(aes(x=time, y=y), size=0.7) + xlim(i,i+window))
}
})
setwd("~/RProjects/testMqtt")
library(animation)
library(ggplot2)
# your data
n  <- 1000
df <- data.frame(time=1:n,y=runif(n))
window <- 100
# create the animation
saveHTML({
for(i in 1:(n-window)) {
print(ggplot(df) + geom_line(aes(x=time, y=y), size=0.7) + xlim(i,i+window))
}
})
library(shiny)
library(magrittr)
ui <- shinyServer(fluidPage(
plotOutput("first_column")
))
server <- shinyServer(function(input, output, session){
# Function to get new observations
get_new_data <- function(){
data <- rnorm(5) %>% rbind %>% data.frame
return(data)
}
# Initialize my_data
my_data <<- get_new_data()
# Function to update my_data
update_data <- function(){
my_data <<- rbind(get_new_data(), my_data)
}
# Plot the 30 most recent values
output$first_column <- renderPlot({
print("Render")
invalidateLater(1000, session)
update_data()
print(my_data)
plot(X1 ~ 1, data=my_data[1:30,], ylim=c(-3, 3), las=1, type="l")
})
})
shinyApp(ui=ui,server=server)
ui <- shinyServer(fluidPage(
plotOutput("first_column")
))
server <- shinyServer(function(input, output, session){
# Function to get new observations
get_new_data <- function(){
data <- rnorm(5) %>% rbind %>% data.frame
return(data)
}
# Initialize my_data
my_data <<- get_new_data()
# Function to update my_data
update_data <- function(){
my_data <<- rbind(get_new_data(), my_data)
}
# Plot the 30 most recent values
output$first_column <- renderPlot({
print("Render")
invalidateLater(1000, session)
update_data()
print(my_data)
plot(X1 ~ 1, data=my_data[1:70,], ylim=c(-3, 3), las=1, type="l")
})
})
shinyApp(ui=ui,server=server)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5) %>% rbind %>% data.frame
? invalidateLater
ui <- shinyServer(fluidPage(
plotOutput("first_column")
plotOutput("second_column")
plotOutput("third_column")
))
server <- shinyServer(function(input, output, session){
# Function to get new observations
get_new_data <- function(){
data <- rnorm(5) %>% rbind %>% data.frame
return(data)
}
# Initialize my_data
my_data <<- get_new_data()
# Function to update my_data
update_data <- function(){
my_data <<- rbind(get_new_data(), my_data)
}
# Plot the 30 most recent values
output$first_column <- renderPlot({
invalidateLater(1000, session)
update_data()
plot(X1 ~ 1, data=my_data[1:30,], ylim=c(-3, 3), las=1, type="l")
})
output$second_column <- renderPlot({
invalidateLater(1000, session)
update_data()
plot(X2 ~ 1, data=my_data[1:30,], ylim=c(-3, 3), las=1, type="l")
})
output$third_column <- renderPlot({
invalidateLater(1000, session)
update_data()
plot(X3 ~ 1, data=my_data[1:30,], ylim=c(-3, 3), las=1, type="l")
})
})
shinyApp(ui=ui,server=server)
? fluidPage
ui <- shinyServer(fluidPage(
plotOutput("first_column"),
plotOutput("second_column"),
plotOutput("third_column")
))
server <- shinyServer(function(input, output, session){
# Function to get new observations
get_new_data <- function(){
data <- rnorm(5) %>% rbind %>% data.frame
return(data)
}
# Initialize my_data
my_data <<- get_new_data()
# Function to update my_data
update_data <- function(){
my_data <<- rbind(get_new_data(), my_data)
}
# Plot the 30 most recent values
output$first_column <- renderPlot({
invalidateLater(1000, session)
update_data()
plot(X1 ~ 1, data=my_data[1:30,], ylim=c(-3, 3), las=1, type="l")
})
output$second_column <- renderPlot({
invalidateLater(1000, session)
update_data()
plot(X2 ~ 1, data=my_data[1:30,], ylim=c(-3, 3), las=1, type="l")
})
output$third_column <- renderPlot({
invalidateLater(1000, session)
update_data()
plot(X3 ~ 1, data=my_data[1:30,], ylim=c(-3, 3), las=1, type="l")
})
})
shinyApp(ui=ui,server=server)
sensor <- function(id, topic, payload, qos, retain, con) {
if (topic == "accelo1") {
cat(topic %>% crayon::cyan(),payload %>%  readBin( "character") %>% crayon::blue(), "\n", sep=" ")
}
}
mqtt_broker("hrbrnique", "192.168.0.17", 1883L) %>%
mqtt_silence(c("error", "log")) %>%
mqtt_subscribe(
"accelo1",
function(id, topic, payload, qos, retain, con) { # regular anonymous function
if (topic == "accelo1")
cat(topic %>% crayon::yellow(), payload %>% readBin( "character") %>% crayon::green(), "\n", sep=" ")
}) %>%
mqtt_subscribe("accelo1", ~{ # tilde shortcut function (passing in named, pre-known params)
if (topic == "accelo1")
cat(topic %>% crayon::yellow(), payload %>% readBin( "character") %>% crayon::red(), "\n", sep=" ")
}) %>%
mqtt_subscribe("accelo1", sensor) %>% # named function
mqtt_run() -> res
